pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    def postgresContainer

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/WaelArfaaoui/AdminModule.git'
            }
        }

        stage('Compile') {
            steps {
                dir('Backend') {
                    sh "mvn compile"
                }
            }
        }

        stage('Test') {
            steps {
                dir('Backend') {
                    script {
                        // Start PostgreSQL container
                        postgresContainer = docker.image('postgres:latest').run('-e POSTGRES_DB=TEST1 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=admin -p 5432:5432')

                        // Wait for PostgreSQL to start
                        sleep(time: 20, unit: 'SECONDS')

                        // Run tests
                        sh "mvn test"
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Backend') {
                    withSonarQubeEnv('sonar') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=AdminModuleAPI -Dsonar.projectKey=AdminModuleAPI \
                                -Dsonar.java.binaries=. \
                                -Dsonar.coverage.exclusions="**/com/talan/adminmodule/config/**,\
                                                             **/com/talan/adminmodule/dto/**,\
                                                             **/com/talan/adminmodule/entity/**,\
                                                             **/com/talan/adminmodule/repository/** ,\
                                                             **/com/talan/adminmodule/validator/** " '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Build') {
            steps {
                dir('Backend') {
                    sh "mvn package"
                }
            }
        }

        stage('Build & Tag Docker Image') {
            steps {
                dir('Backend') {
                    script {
                        withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh "docker build -t arfaoui01/admin-module-api:1.0.1 ."
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('Backend') {
                    script {
                        withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh "docker push arfaoui01/admin-module-api:1.0.1"
                        }
                    }
                }
            }
        }

        stage('Stop PostgreSQL') {
            steps {
                script {
                    // Stop and remove the PostgreSQL container
                    if (postgresContainer) {
                        postgresContainer.stop()
                    }
                }
            }
        }
    }
}
